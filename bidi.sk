require "./expr.sk"

enum ContextElement
  case Variable(name: String)
  case Existential(ext: Ext)
  case Solved(ext: Ext, type: Type)
  case Marker(ext: Ext)
  case TypedVariable(name: String, type: Type)

  def ==(other: ContextElement) -> Bool
    self.to_s == other.to_s
  end

  def to_s -> String
    match self
    when Variable(name)
      name
    when Existential(ext) 
      ext.to_s
    when Solved(name, type)
      "^#{name}:#{type}"
    when Marker(ext) 
      "▶#{ext}"
    when TypedVariable(x, ty)
      "#{x}:#{ty}"
    end
  end
end

class Context
  def self.empty -> Context
    Context.new(Array<ContextElement>.new)
  end

  def initialize(elements: Array<ContextElement>)
    @_elements = elements
  end

  # Returns new context which is self + [x]
  def add(x: ContextElement) -> Context
    a = @_elements.clone
    a.push(x)
    Context.new(a)
  end

  def clone -> Context
    Context.new(@_elements.clone)
  end

  # Return the annotated type of variable `x`.
  def get_annotation(x: String) -> Maybe<Type>
    var ret = None
    @_elements.each do |ele: ContextElement|
      match ele
      when ContextElement::TypedVariable(v, type)
        if v == x
          ret = Some.new(type)
        end
      else
      end
    end
    ret
  end

  # Returns the solved type of `^α`, if any.
  def get_solved(alpha: Ext) -> Maybe<Type>
    var ret = None
    @_elements.each do |ele: ContextElement|
      match ele
      when ContextElement::Solved(alpha1, tau)
        if alpha == alpha1
          ret = Some.new(tau)
        end
      else
      end
    end
    ret
  end

  # Returns if there is `^α`.
  def has_existential?(alpha: String) -> Bool
    @_elements.any?{|e: ContextElement|
      match e
      when ContextElement::Existential(ext)
        ext.name == alpha
      else
        false
      end
    }
  end

  # Returns if there is `α`.
  def has_variable?(alpha: String) -> Bool
    @_elements.any?{|e: ContextElement|
      match e
      when ContextElement::Variable(name)
        name == alpha
      else
        false
      end
    }
  end

  # Create a context without the elements starting from `element`.
  # Panic if not found
  def drop(element: ContextElement) -> Context
    match @_elements.position{|x: ContextElement| x == element}
    when Some(i)
      match @_elements.split_at(i)
      when Pair(left, right)
        Context.new(left)
      end
    else
      panic "drop: element \{element} not found"
    end
  end

  # Creates two contexts. From head to just before `element`, from `element` to the end
  def split_at(element: ContextElement) -> Pair<Context, Context>
    match @_elements.position{|x: ContextElement| x == element}
    when Some(i)
      match @_elements.split_at(i)
      when Pair(left, right)
        Pair<Context, Context>.new(Context.new(left), Context.new(right))
      end
    else
      panic "split_at: element \{element} not found"
    end
  end

  # Make a new context by replacing `element` with `inserts`.
  def replace(element: ContextElement, inserts: Array<ContextElement>) -> Context
    match @_elements.position{|x: ContextElement| x == element}
    when Some(i)
      match @_elements.split_at(i-1)
      when Pair(left, right)
        Context.new(left + inserts + right)
      end
    else
      panic "replace: element \{element} not found"
    end
  end

  def check_well_formed(type: Type) -> Array<Error>
    ok = Array<Error>.new
    match type
    when Type::Raw(_)
      ok
    when Type::Variable(name)
      if self.has_variable?(name)
        ok
      else
        [Error.new("unknown variable `#{name}'")]
      end
    when Type::Function(arg_ty, ret_ty) 
      check_well_formed(arg_ty) + check_well_formed(ret_ty)
    when Type::List(elem_ty)
      check_well_formed(elem_ty)
    when Type::Quantification(name, type)
      self.add(ContextElement::Variable.new(name)).check_well_formed(type)
    when Type::Existential(ext)
      if self.has_existential?(ext.name) or get_solved(ext).some?
        ok
      else
        [Error.new("unknown existential `#{ext}'")]
      end
    end
  end

  def well_formed?(type: Type) -> Bool
    check_well_formed(type).empty?
  end

  def assert_well_formed(type: Type)
    errors = check_well_formed(type)
    if not errors.empty?
      panic("!! not well formed: \{errors}")
    end
  end

  def to_s -> String
    "[" + @_elements.map<String>{|x: ContextElement| x.to_s}.join(", ") + "]"
  end
end

class Bidi
  def self.parse(s: String) -> Expression
    Expression.parse(Sexp.parse(s))
  end

  def run(expr: Expression)
    print_header
    t = synth(expr)
    puts "result: \{t}"
  end

  def synth(expr: Expression) -> Type
    t_c = synthesizes_to(Context.empty, expr)
    puts "(synthesized type: \{t_c.fst}, context: \{t_c.snd})"
    apply_context(t_c.fst, t_c.snd)
  end

  # Figure 11. Algorithmic typing
  def synthesizes_to(context: Context, expr: Expression) -> Pair<Type, Context>
    print_helper("synth", expr.to_s, "", context)
    match expr
    when Expression::Literal(val)
      print_rule("Literal")
      match val
      when Int
        Pair<Type, Context>.new(Type::Raw.new("Int"), context.clone())
      when Bool
        Pair<Type, Context>.new(Type::Raw.new("Bool"), context.clone())
      else
        panic "!! synthesizes_to/Expression::Literal: unsupported val \{val}"
      end
    when Expression::Variable(x)
      print_rule("Var")
      match context.get_annotation(x)
      when Some(annotation)
        Pair<Type, Context>.new(annotation, context.clone())
      else
        panic("!! typed variable #{x} not found !!")
      end
    when Expression::Extern(name, type, body_expr)
      print_rule("Extern")
      context.assert_well_formed(type)
      theta = context.add(ContextElement::TypedVariable.new(name, type))
      synthesizes_to(theta, body_expr)

    when Expression::Annotation(expr, anno_type)
      print_rule("Anno")
      context.assert_well_formed(anno_type)
      delta = checks_against(context, expr, anno_type)
      Pair<Type, Context>.new(anno_type, delta)

    # If the expr is `λvarname . expr`...
    when Expression::Abstraction(varname, expr)
      print_rule("->I=>");
      # Assume its type as `^α -> ^β`
      alpha = Ext.new
      beta = Ext.new
      gamma = context.
        add(ContextElement::Existential.new(alpha)).
        add(ContextElement::Existential.new(beta)).
        add(ContextElement::TypedVariable.new(varname, Type::Existential.new(alpha)))
      delta = checks_against(gamma, expr, Type::Existential.new(beta))
      func = Type::Function.new(Type::Existential.new(alpha),
                                Type::Existential.new(beta))
      Pair<Type, Context>.new(func, delta)

    # If the expr is `e1 e2`...
    when Expression::Application(e1, e2)
      print_rule("->E")
      # Synth the type of the function `e1`
      match synthesizes_to(context, e1)
      when Pair(a, theta)
        application_synthesizes_to(theta, apply_context(a, theta), e2)
      end
    end
  end

  # Figure 8. Applying a context, as asubstitution, to a type
  # Replaces known existential types.
  def apply_context(a: Type, context: Context) -> Type
    match a
    when Type::Raw(_)
      a
    when Type::Variable(_)
      a
    when Type::Existential(alpha)
      match context.get_solved(alpha)
      when Some(tau)
        apply_context(tau, context)
      else
        a
      end
    when Type::Function(a, b)
      Type::Function.new(apply_context(a, context),
                         apply_context(b, context))
    when Type::List(elem_ty)
      Type::List.new(apply_context(elem_ty, context))
    when Type::Quantification(alpha, a)
      Type::Quantification.new(alpha, apply_context(a, context))
    end
  end

  # Figure 11. Algorithmic typing
  def checks_against(context: Context, expr: Expression, type: Type) -> Context
    print_helper("check", expr.to_s, type.to_s, context)
    context.assert_well_formed(type)
    match Pair<Expression, Type>.new(expr, type)
    when Pair(Expression::Abstraction(x, e), Type::Function(a, b))
      # Check a type of a function.
      print_rule("->I")
      # The parameter of the function
      typed_var = ContextElement::TypedVariable.new(x, a)
      gamma = context.add(typed_var)
      # Check the type of the function body
      checks_against(gamma, e, b).drop(typed_var)
    when Pair(_, Type::Quantification(alpha, a))
      # Check the expr can be of type ∀α.A
      print_rule("∀I")
      v = ContextElement::Variable.new(alpha)
      gamma = context.add(v)
      checks_against(gamma, expr, a).drop(v)
    else
      print_rule("Sub")
      # Let `a` be the synthesized type of `expr`
      match synthesizes_to(context, expr)
      when Pair(a, theta)
        subtype(theta, apply_context(a, theta), apply_context(type, theta))
      end
    end
  end

  # Figure 9. Algorithmic subtyping
  # Checks if `a` is (or, can be) a subtype of `b`.
  def subtype(context: Context, a: Type, b: Type) -> Context
    ok = context.clone
    print_helper("subtype", a.to_s, b.to_s, context)
    context.assert_well_formed(a)
    context.assert_well_formed(b)
    match Pair<Type, Type>.new(a, b)
    when Pair(Type::Raw(a_name), Type::Raw(b_name))
      # Corresponds to <:Unit of the original
      print_rule("<:Raw") 
      if a_name == b_name
        # ok if `a` and `b` are the same type
        ok
      else
        panic "!! not sure #{a} is subtype of #{b}"
      end

    when Pair(Type::Variable(alpha1), Type::Variable(alpha2))
      print_rule("<:Var")
      if alpha1 == alpha2
        # ok if these are the same variable
        ok
      else
        panic("!! #{alpha1} != #{alpha2}")
      end

    when Pair(Type::Existential(exist1), Type::Existential(exist2))
      print_rule("<:Exvar")
      if exist1 == exist2
        # ok if these are the same existential variable
        ok
      else
        panic("!! #{exist1} != #{exist2}")
      end

    when Pair(Type::List(e1), Type::List(e2))
      print_rule("<:List")
      # The type parameter of `List` is assumed to be covariant (i.e. `List` is immutable list.)
      subtype(context, e1, e2)

    when Pair(Type::Function(a1, a2), Type::Function(b1, b2))
      print_rule("<:->")
      # If `a1 -> a2` is a subtype of `b1 -> b2`,
      # b1 should be a subtype of a1
      theta = subtype(context, b1, a1)
      # and a2 should be a subtype of b2.
      subtype(theta, apply_context(a2, theta),
                            apply_context(b2, theta))

    when Pair(Type::Quantification(alpha, a), _)
      print_rule("<:∀L")
      r1 = Ext.new
      gamma = context.
        add(ContextElement::Marker.new(r1)).
        add(ContextElement::Existential.new(r1))
      aa = a.substitute(alpha, Type::Existential.new(r1))
      delta = subtype(gamma, aa, b)
      delta.drop(ContextElement::Marker.new(r1))

    when Pair(_, Type::Quantification(alpha, b))
      print_rule "<:∀R"
      theta = context.add(ContextElement::Variable.new(alpha))
      delta = subtype(theta, a, b)
      delta.drop(ContextElement::Variable.new(alpha))

    when Pair(Type::Existential(alpha), _)
      print_rule "<:InstantiateL"
      if b.occurs?(alpha)
        panic "!! Circular before instantiate_l \{alpha}, \{b}"
      else
        instantiate_l(context, alpha, b)
      end
    when Pair(_, Type::Existential(alpha))
      print_rule "<:InstantiateR"
      if a.occurs?(alpha)
        panic "!! Circular before instantiate_r \{alpha}, \{a}"
      else
        instantiate_r(context, a, alpha)
      end
    else
      panic("!! couldn't subtype #{a} and #{b}")
    end
  end

  # Figure 10. Instantiation
  # Instantiate an existential variable `^α` such that it is a subtype of `b`.
  def instantiate_l(context: Context, alpha: Ext, b: Type) -> Context
    print_helper("instantiate_l", alpha.to_s, b.to_s, context)
    lr = context.split_at(ContextElement::Existential.new(alpha))
    left_context = lr.fst
    right_context = lr.snd

    # InstLSolve
    if b.monotype? and left_context.well_formed?(b)
      print_rule("InstLSolve")
      inserts = Array<ContextElement>.new()
      inserts.push(ContextElement::Solved.new(alpha, b))
      print_misc "#{alpha} is solved to #{b}."
      return context.replace(ContextElement::Existential.new(alpha), inserts)
    end
    match b
    when Type::Function(a1, a2)
      print_rule "InstLArr"
      alpha1 = Ext.new
      alpha2 = Ext.new
      print_misc "Let #{alpha} be ^#{alpha1}->^#{alpha2}"
      func_ty = Type::Function.new(Type::Existential.new(alpha1), Type::Existential.new(alpha2))
      gamma = context.replace(ContextElement::Existential.new(alpha), [
        ContextElement::Existential.new(alpha2),
        ContextElement::Existential.new(alpha1),
        ContextElement::Solved.new(alpha, func_ty)
      ])
      theta = instantiate_r(gamma, a1, alpha1)
      instantiate_l(theta, alpha2, apply_context(a2, theta))
    when Type::Quantification(beta, b)
      print_rule "InstLAllR"
      gamma = context.add(ContextElement::Variable.new(beta))
      delta = instantiate_l(gamma, alpha, b)
      delta.drop(ContextElement::Variable.new(beta))
    when Type::Existential(beta)
      print_rule "InstLReach"
      print_misc "#{beta} = #{alpha}"
      right_context.assert_well_formed(b)
      # shiika-lang/shiika#388
      inserts_ = Array<ContextElement>.new()
      inserts_.push(ContextElement::Solved.new(beta, Type::Existential.new(alpha)))
      context.replace(ContextElement::Existential.new(beta), inserts_)
    else
      panic "instantiate_l failed"
    end
  end

  # Figure 10. Instantiation
  # Instantiate an existential variable `^α` such that it is a supertype of `a`.
  def instantiate_r(context: Context, a: Type, alpha: Ext) -> Context
    print_helper("instantiate_r", a.to_s, alpha.to_s, context)
    lr = context.split_at(ContextElement::Existential.new(alpha))
    left_context = lr.fst
    right_context = lr.snd

    # InstRSolve
    if a.monotype? and left_context.well_formed?(a)
      print_rule("InstRSolve")
      inserts = Array<ContextElement>.new()
      inserts.push(ContextElement::Solved.new(alpha, a))
      print_misc "#{alpha} is solved to #{a}."
      return context.replace(ContextElement::Existential.new(alpha), inserts)
    end
    match a
    when Type::Function(a1, a2)
      print_rule "InstRArr"
      # Let `^α` be `^α1 -> ^α2`
      alpha1 = Ext.new
      alpha2 = Ext.new
      print_misc "Let #{alpha} be #{alpha1}->#{alpha2}"
      func_ty = Type::Function.new(Type::Existential.new(alpha1), Type::Existential.new(alpha2))
      gamma = context.replace(ContextElement::Existential.new(alpha), [
        ContextElement::Existential.new(alpha2),
        ContextElement::Existential.new(alpha1),
        ContextElement::Solved.new(alpha, func_ty)
      ])
      theta = instantiate_l(gamma, alpha1, a1)
      instantiate_r(theta, apply_context(a2, theta), alpha2)
    when Type::Quantification(beta, b)
      print_rule "InstRAllL"
      beta1 = Ext.new
      gamma = context.
        add(ContextElement::Marker.new(beta1)).
        add(ContextElement::Existential.new(beta1))
      bb = b.substitute(beta, Type::Existential.new(beta1))
      delta = instantiate_r(gamma, bb, alpha)
      delta.drop(ContextElement::Marker.new(beta1))
    when Type::Existential(beta)
      print_rule "InstRReach"
      print_misc "#{beta} = #{alpha}"
      right_context.assert_well_formed(a)
      # shiika-lang/shiika#388
      inserts_ = Array<ContextElement>.new()
      inserts_.push(ContextElement::Solved.new(beta, Type::Existential.new(alpha)))
      context.replace(ContextElement::Existential.new(beta), inserts_)
    else
      panic "instantiate_r failed"
    end
  end

  # Figure 11. Algorithmic typing
  # Synthesizes a type of a function application.
  # - `type`: The type of the function
  # - `expr`: The argument
  def application_synthesizes_to(context: Context, fn_type: Type, expr: Expression) -> Pair<Type, Context>
    print_helper("app_synth", expr.to_s, fn_type.to_s, context)
    match fn_type
    when Type::Existential(alpha)
      print_rule("^αApp")
      # Let `^α` be `^α1 -> ^α2`.
      alpha1 = Ext.new
      alpha2 = Ext.new
      print_misc "Let #{alpha} be #{alpha1}->#{alpha2}."
      func_ty = Type::Function.new(Type::Existential.new(alpha1), Type::Existential.new(alpha2))
      gamma = context.
        add(ContextElement::Existential.new(alpha2)).
        add(ContextElement::Existential.new(alpha1)).
        add(ContextElement::Solved.new(alpha, func_ty))
      delta = checks_against(gamma, expr, Type::Existential.new(alpha1))
      Pair<Type, Context>.new(Type::Existential.new(alpha2), delta)
    when Type::Quantification(alpha, a)
      print_rule("∀App")
      # Let the value of the type variable `alpha` as `ext`.
      ext = Ext.new
      gamma = context.add(ContextElement::Existential.new(ext))
      substituted_a = a.substitute(alpha, Type::Existential.new(ext))
      application_synthesizes_to(gamma, substituted_a, expr)
    when Type::Function(arg_ty, ret_ty)
      print_rule("->App")
      # If `type` is neither existential or quantification,
      # Just check the argument type
      delta = checks_against(context, expr, arg_ty)
      Pair<Type, Context>.new(ret_ty, delta)
    else
      panic "!! application_synthesizes_to: \{fn_type} is not a function type"
    end
  end

  def print_header
    puts "#{"fun".ljust(15, " ")} #{"c1".ljust(35, " ")}| #{"c2".ljust(25, " ")} context"
  end

  def print_helper(fun: String, c1: String, c2: String, context: Context)
    puts "#{fun.ljust(15, " ")} #{c1.ljust(35, " ")}| #{c2.ljust(25, " ")} #{context}"
  end

  def print_rule(rule: String)
    puts "  #{rule}"
  end

  def print_misc(msg: String)
    puts "  - #{msg}"
  end
end

map_fn_type = "(-> E R)"
e = Bidi.parse("
;(extern is_odd (-> Int Bool)
;(extern nums ([] int)
;(extern list_map (∀ E (∀ R (-> #{map_fn_type} (-> ([] E) ([] R)))))
;(extern board ([] ([] Bool))

(extern list_first (∀ E (-> ([] E) E))
(extern fn_list (∀ X ([] (-> X X)))
  ((list_first fn_list) 123)

;(extern list_first (∀ E (-> ([] E) E))
;(extern fn_list ([] (∀ X (-> X X)))
;  (list_first fn_list)

") # Last closing parenthesis may be omitted.

Bidi.new.run(e)
