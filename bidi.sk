enum Expression
  case Literal(val: Object)
  case Variable(name: String)
  case Extern(name: String, type: Type, body: Expression)
  case Abstraction(alphas: Array<String>, expr: Expression)
  case Application(fn_expr: Expression, arg_exprs: Array<Expression>)
  case Annotation(expr: Expression, type: Type)

  def to_s -> String
    match self
    when Literal(val)
      val.to_s
    when Variable(name)
      name
    when Extern(name, type, body)
      "with #{name}: #{type}|#{body}"
    when Abstraction(alphas, expr)
      "(\\#{alphas} -> #{expr})"
    when Application(fn_expr, arg_exprs)
      "#{fn_expr}(#{arg_exprs.join(", ")})"
    when Annotation(expr, type)
      "(#{expr}: #{type})"
    end
  end
end

enum Type
  case Raw(name: String, tyargs: Array<Type>)
  case Variable(name: String)
  case Existential(name: String)
  case Quantification(name: String, type: Type)
  case Function(arg_tys: Array<Type>, ret_ty: Type)

  def monotype? -> Bool
    match self
    when Quantification(_, _)
      false
    when Function(arg_tys, ret_ty)
      arg_tys.all?{|x: Type| x.monotype?} and ret_ty.monotype?
    else
      true
    end
  end

  def occurs?(alpha: String) -> Bool
    match self
    when Raw(_, tyargs)
      tyargs.any?{|t: Type| t.occurs?(alpha)}
    when Variable(name)
      alpha == name
    when Function(arg_tys, ret_ty) 
      arg_tys.any?{|x: Type| x.occurs?(alpha)} or ret_ty.occurs?(alpha)
    when Quantification(name, type)
      if alpha == name
        true
      else
        type.occurs?(alpha)
      end
    when Existential(name) 
      alpha == name
    end
  end

  def substitute(alpha: String, t: Type) -> Type
    match self
    when Raw(name, tyargs)
      new_args = tyargs.map<Type>{|ty: Type| ty.substitute(alpha, t)}
      Type::Raw.new(name, new_args)
    when Variable(name)
      if name == alpha then t else self end
    when Quantification(name, type)
      if name == alpha
        Type::Quantification.new(name, t)
      else
        Type::Quantification.new(name, type.substitute(alpha, t))
      end
    when Existential(name)
      if name == alpha then t else self end
    when Function(arg_tys, ret_ty) 
      Type::Function.new(
        arg_tys.map<Type>{|x: Type| x.substitute(alpha, t)},
        ret_ty.substitute(alpha, t))
    end
  end

  def to_s -> String
    match self
    when Raw(name, tyargs)
      if tyargs.empty?
        name
      else
        args = tyargs.map<String>{|t: Type| t.to_s}.join(", ")
        "#{name}<#{args}>"
      end
    when Variable(name)
      name
    when Existential(name) 
      "#{name}^"
    when Quantification(name, type)
      "(âˆ€#{name}. #{type})"
    when Function(arg_tys, ret_ty) 
      "(\{arg_tys} -> #{ret_ty})"
    end
  end
end

enum ContextElement
  case Variable(name: String)
  case Existential(name: String)
  case Solved(name: String, type: Type)
  case Marker(name: String)
  case TypedVariable(name: String, type: Type)

  def ==(other: ContextElement) -> Bool
    self.to_s == other.to_s
  end

  def to_s -> String
    match self
    when Variable(name)
      name
    when Existential(name) 
      "#{name}^"
    when Solved(name, type)
      "#{name}^: #{type}"
    when Marker(a) 
      "<|#{a}"
    when TypedVariable(x, ty)
      "#{x}: #{ty}"
    end
  end
end

class Context
  def self.empty -> Context
    Context.new(Array<ContextElement>.new)
  end

  def initialize(elements: Array<ContextElement>)
    @_elements = elements
  end

  # Returns new context which is self + [x]
  def add(x: ContextElement) -> Context
    a = @_elements.clone
    a.push(x)
    Context.new(a)
  end

  def clone -> Context
    Context.new(@_elements.clone)
  end

  # Return the annotated type of variable `x`.
  def get_annotation(x: String) -> Maybe<Type>
    var ret = None
    @_elements.each do |ele: ContextElement|
      match ele
      when ContextElement::TypedVariable(v, type)
        if v == x
          ret = Some.new(type)
        end
      else
      end
    end
    ret
  end

  def get_solved(alpha: String) -> Maybe<Type>
    var ret = None
    @_elements.each do |ele: ContextElement|
      match ele
      when ContextElement::Solved(alpha1, tau)
        if alpha == alpha1
          ret = Some.new(tau)
        end
      else
      end
    end
    ret
  end

  def has_existential?(alpha: String) -> Bool
    @_elements.any?{|e: ContextElement|
      match e
      when ContextElement::Existential(name)
        name == alpha
      else
        false
      end
    }
  end

  def has_variable?(alpha: String) -> Bool
    @_elements.any?{|e: ContextElement|
      match e
      when ContextElement::Variable(name)
        name == alpha
      else
        false
      end
    }
  end

  # Create a context without the elements starting from `element`.
  # Panic if not found
  def drop(element: ContextElement) -> Context
    match @_elements.position{|x: ContextElement| x == element}
    when Some(i)
      match @_elements.split_at(i)
      when Pair(left, right)
        Context.new(left)
      end
    else
      panic "drop: element \{element} not found"
    end
  end

  def drop_n(elements: Array<ContextElement>) -> Context
    elements.fold<Context>(self){|c: Context, e: ContextElement|
      c.drop(e)
    }
  end

  # Creates two contexts. From head to just before `element`, from `element` to the end
  def split_at(element: ContextElement) -> Pair<Context, Context>
    match @_elements.position{|x: ContextElement| x == element}
    when Some(i)
      match @_elements.split_at(i)
      when Pair(left, right)
        Pair<Context, Context>.new(Context.new(left), Context.new(right))
      end
    else
      panic "split_at: element \{element} not found"
    end
  end

  # Make a new context by replacing `element` with `inserts`.
  def replace(element: ContextElement, inserts: Array<ContextElement>) -> Context
    match @_elements.position{|x: ContextElement| x == element}
    when Some(i)
      match @_elements.split_at(i-1)
      when Pair(left, right)
        Context.new(left + inserts + right)
      end
    else
      panic "replace: element \{element} not found"
    end
  end

  def check_well_formed(type: Type) -> Array<Error>
    ok = Array<Error>.new
    match type
    when Type::Raw(_, tyargs)
      tyargs.flat_map<Error>{|t: Type| check_well_formed(t)}
    when Type::Variable(name)
      if self.has_variable?(name)
        ok
      else
        [Error.new("unknown variable `#{name}'")]
      end
    when Type::Function(arg_tys, ret_ty) 
      arg_tys.flat_map<Error>{|t: Type| check_well_formed(t)} + 
        check_well_formed(ret_ty)
    when Type::Quantification(name, type)
      self.add(ContextElement::Variable.new(name)).check_well_formed(type)
    when Type::Existential(name)
      if self.has_existential?(name) or get_solved(name).some?
        ok
      else
        [Error.new("unknown existential `#{name}'")]
      end
    end
  end

  def well_formed?(type: Type) -> Bool
    check_well_formed(type).empty?
  end

  def assert_well_formed(type: Type)
    errors = check_well_formed(type)
    if not errors.empty?
      panic("!! not well formed: \{errors}")
    end
  end

  def to_s -> String
    "[" + @_elements.map<String>{|x: ContextElement| x.to_s}.join(", ") + "]"
  end
end

class State
  def initialize
    var @id = 0
  end

  def fresh_existential -> String
    ret = "t#{@id}"
    @id += 1
    ret
  end
end

class Bidi
  def run(expr: Expression)
    print_header
    t = synth(expr)
    puts "result: \{t}"
  end

  def synth(expr: Expression) -> Type
    t_c = synthesizes_to(State.new, Context.empty, expr)
    puts "(synthesized type: \{t_c.fst}, context: \{t_c.snd})"
    apply_context(t_c.fst, t_c.snd)
  end

  # Figure 11
  def synthesizes_to(state: State, context: Context, expr: Expression) -> Pair<Type, Context>
    print_helper("synth", expr.to_s, "", context)
    match expr
    when Expression::Literal(val)
      print_rule("Literal")
      match val
      when Int
        Pair<Type, Context>.new(Type::Raw.new("Int", Array<Type>.new), context.clone())
      when Bool
        Pair<Type, Context>.new(Type::Raw.new("Bool", Array<Type>.new), context.clone())
      else
        panic "!! synthesizes_to/Expression::Literal: unsupported val \{val}"
      end
    when Expression::Variable(x)
      print_rule("Var")
      match context.get_annotation(x)
      when Some(annotation)
        Pair<Type, Context>.new(annotation, context.clone())
      else
        panic("!! variable #{x} not found !!")
      end
    when Expression::Extern(name, type, body_expr)
      print_rule("Extern")
      theta = context.add(ContextElement::TypedVariable.new(name, type))
      match synthesizes_to(state, theta, body_expr)
      when Pair(t, delta)
        delta2 = delta.replace(ContextElement::TypedVariable.new(name, type),
                               Array<ContextElement>.new)
        Pair<Type, Context>.new(t, delta2)
      end

    when Expression::Annotation(expr, annotation)
      print_rule("Anno")
      context.assert_well_formed(annotation)
      delta = checks_against(state, context, expr, annotation)
      Pair<Type, Context>.new(annotation, delta)

    when Expression::Abstraction(varnames, expr)
      print_rule("->I=>");
      alphas = varnames.map<String>{|v: String| state.fresh_existential}
      beta = state.fresh_existential
      var ctx_elems = alphas.map<ContextElement>{|alpha: String|
        ContextElement::Existential.new(alpha).unsafe_cast(ContextElement)
      }
      ctx_elems += [ContextElement::Existential.new(beta).unsafe_cast(ContextElement)]
      ctx_elems += Enumerable.zip<String, String>(varnames, alphas).
        map<ContextElement>{|pair: Pair<String, String>|
          match pair
          when Pair(varname, alpha)
            ContextElement::TypedVariable.new(varname, Type::Existential.new(alpha)).unsafe_cast(ContextElement)
          end
        }
      gamma = ctx_elems.fold<Context>(context){|c: Context, e: ContextElement| c.add(e)}
      delta = checks_against(state, gamma, expr, Type::Existential.new(beta))
      params = alphas.map<Type>{|alpha: String|
        Type::Existential.new(alpha).unsafe_cast(Type)
      }
      func = Type::Function.new(params, Type::Existential.new(beta))
      Pair<Type, Context>.new(func, delta)

    when Expression::Application(fn_expr, arg_exprs)
      print_rule("->E")
      match synthesizes_to(state, context, fn_expr)
      when Pair(a, theta)
        application_synthesizes_to(state, theta, apply_context(a, theta), arg_exprs)
      end
    end
  end

  # Figure 8
  def apply_context(a: Type, context: Context) -> Type
    match a
    when Type::Raw(name, tyargs)
      Type::Raw.new(name, tyargs.map<Type>{|t: Type| apply_context(t, context)})
    when Type::Variable(_)
      a
    when Type::Existential(alpha)
      match context.get_solved(alpha)
      when Some(tau)
        apply_context(tau, context)
      else
        a
      end
    when Type::Function(arg_tys, ret_ty)
      Type::Function.new(arg_tys.map<Type>{|t: Type| apply_context(t, context)},
                         apply_context(ret_ty, context))
    when Type::Quantification(alpha, a)
      Type::Quantification.new(alpha, apply_context(a, context))
    end
  end

  # Figure 11
  # Mutates `state`
  def checks_against(state: State, context: Context, expr: Expression, type: Type) -> Context
    print_helper("check", expr.to_s, type.to_s, context)
    context.assert_well_formed(type)
    match Pair<Expression, Type>.new(expr, type)
    when Pair(Expression::Abstraction(param_names, body_expr), Type::Function(param_tys, ret_ty))
      print_rule("->I")
      typed_vars = Enumerable.zip<String, Type>(param_names, param_tys).map<ContextElement>{|pair: Pair<String, Type>|
        match pair
        when Pair(param_name, param_ty)
          ContextElement::TypedVariable.new(param_name, param_ty).unsafe_cast(ContextElement)
        end
      }
      gamma = typed_vars.fold<Context>(context){|c: Context, typed_var: ContextElement|
        c.add(typed_var)
      }
      checks_against(state, gamma, body_expr, ret_ty).drop_n(typed_vars)
    when Pair(_, Type::Quantification(alpha, a))
      print_rule("âˆ€I")
      v = ContextElement::Variable.new(alpha)
      gamma = context.add(v)
      checks_against(state, gamma, expr, a).drop(v)
    else
      print_rule("Sub")
      match synthesizes_to(state, context, expr)
      when Pair(a, theta)
        subtype(state, theta, apply_context(a, theta), apply_context(type, theta))
      end
    end
  end

  # Figure 9
  def subtype(state: State, context: Context, a: Type, b: Type) -> Context
    ok = context.clone
    print_helper("subtype", a.to_s, b.to_s, context)
    context.assert_well_formed(a)
    context.assert_well_formed(b)
    match Pair<Type, Type>.new(a, b)
    when Pair(Type::Raw(a_name, a_args), Type::Raw(b_name, b_args))
      print_rule("<:Raw")
      if a_name == b_name
        if a_args == b_args
          ok
        else
          panic "arity mismatch" if a_args.length != b_args.length
          var c = context
          0.upto(a_args.length-1) do |i: Int|
            c = subtype(state, c, a_args[i], b_args[i])
          end
          c  # TODO: Really?
        end
      else
        panic "!! not sure #{a} is subtype of #{b}"
      end
    when Pair(Type::Variable(alpha1), Type::Variable(alpha2))
      print_rule("<:Var")
      if alpha1 == alpha2
        ok
      else
        panic("!! #{alpha1} != #{alpha2}")
      end
    when Pair(Type::Existential(exist1), Type::Existential(exist2))
      print_rule("<:Exvar")
      if exist1 == exist2
        ok
      else
        panic("!! #{exist1} != #{exist2}")
      end
    when Pair(Type::Function(a1, a2), Type::Function(b1, b2))
      panic("todo <:->")
    when Pair(Type::Quantification(alpha, a), _)
      panic("todo <:âˆ€L")
      r1 = state.fresh_existential
      gamma = context.
        add(ContextElement::Marker.new(r1)).
        add(ContextElement::Existential.new(r1))
      aa = a.substitute(alpha, Type::Existential.new(r1))
      delta = subtype(state, gamma, aa, b)
      delta.drop(ContextElement::Marker.new(r1))
    when Pair(_, Type::Quantification(alpha, a))
      panic("todo <:âˆ€R")
    when Pair(Type::Existential(alpha), _)
      if b.occurs?(alpha)
        panic "!! Circular before instantiate_l \{alpha}, \{b}"
      else
        instantiate_l(state, context, alpha, b)
      end
    when Pair(_, Type::Existential(alpha))
      if a.occurs?(alpha)
        panic "!! Circular before instantiate_r \{alpha}, \{a}"
      else
        instantiate_r(state, context, a, alpha)
      end
    else
      panic("!! couldn't subtype #{a} and #{b}")
    end
  end

  # Figure 10
  def instantiate_l(state: State, context: Context, alpha: String, b: Type) -> Context
    print_helper("instantiate_l", alpha, b.to_s, context)
    lr = context.split_at(ContextElement::Existential.new(alpha))
    left_context = lr.fst
    right_context = lr.snd

    # InstLSolve
    if b.monotype? and left_context.well_formed?(b)
      print_rule("InstLSolve")
      inserts = Array<ContextElement>.new()
      inserts.push(ContextElement::Solved.new(alpha, b))
      return context.replace(ContextElement::Existential.new(alpha), inserts)
    end

    panic "todo instantiate_l"
  end

  # Figure 10
  def instantiate_r(state: State, context: Context, a: Type, alpha: String) -> Context
    print_helper("instantiate_r", a.to_s, alpha, context)
    lr = context.split_at(ContextElement::Existential.new(alpha))
    left_context = lr.fst
    right_context = lr.snd

    # InstRSolve
    if a.monotype? and left_context.well_formed?(a)
      print_rule("InstRSolve")
      inserts = Array<ContextElement>.new()
      inserts.push(ContextElement::Solved.new(alpha, a))
      return context.replace(ContextElement::Existential.new(alpha), inserts)
    end

    panic "todo instantiate_r"
  end

  # Figure 11
  def application_synthesizes_to(state: State, context: Context, type: Type, arg_exprs: Array<Expression>) -> Pair<Type, Context>
    print_helper("app_synth", arg_exprs.inspect, type.to_s, context)
    match type
    when Type::Existential(alpha)
      panic "todo application_synthesizes_to 1"
    when Type::Quantification(alpha, a)
      print_rule("âˆ€App")
      alpha1 = state.fresh_existential
      gamma = context.add(ContextElement::Existential.new(alpha1))
      substituted_a = a.substitute(alpha, Type::Existential.new(alpha1))
      application_synthesizes_to(state, gamma, substituted_a, arg_exprs)
    when Type::Function(arg_tys, ret_ty) 
      print_rule("->App")
      panic "!! arity mismatch" if arg_tys.length != arg_exprs.length
      var c = context
      Enumerable.zip<Type,Expression>(arg_tys, arg_exprs).each do |pair: Pair<Type, Expression>|
        match pair
        when Pair(arg_ty, arg_expr)
          c = checks_against(state, c, arg_expr, arg_ty)
        end
      end
      Pair<Type, Context>.new(ret_ty, c)
    else
      panic "!! application_synthesizes_to: unexpected type \{type}"
    end
  end

  def print_header
    puts "#{"fun".ljust(15, " ")} #{"c1".ljust(35, " ")}| #{"c2".ljust(25, " ")} context"
  end

  def print_helper(fun: String, c1: String, c2: String, context: Context)
    puts "#{fun.ljust(15, " ")} #{c1.ljust(35, " ")}| #{c2.ljust(25, " ")} #{context}"
  end

  def print_rule(rule: String)
    puts "  #{rule}"
  end
end

ty_int = Type::Raw.new("Int", Array<Type>.new)
ty_int_ = [Type::Raw.new("Int", Array<Type>.new)].unsafe_cast(Array<Type>)
ty_bool = Type::Raw.new("Bool", Array<Type>.new)
t_ = Array<Type>.new; t_.push(Type::Variable.new("T"))
ty_ary_t = Type::Raw.new("Array", t_)
ty_ary_t_ = [Type::Raw.new("Array", t_)].unsafe_cast(Array<Type>)
ty_str = Type::Raw.new("String", Array<Type>.new)

## def foo<T>(x: T){ x }
#id = Expression::Annotation.new(
#  # fn(x){ x } 
#  Expression::Abstraction.new(["x"], Expression::Variable.new("x")),
#  # : âˆ€T. T -> T
#  Type::Quantification.new("T",
#    Type::Function.new(Type::Variable.new("T"), Type::Variable.new("T"))))
#
## fn(a){ a: Int }
#unit_id_anno = Expression::Abstraction.new(["a"],
#  Expression::Annotation.new(Expression::Variable.new("a"), ty_int))


int_val = Expression::Literal.new(123)
# odd?(n: Int) -> Bool
#odd_p = Expression::Annotation.new(
#  Expression::Abstraction.new(["n"], Expression::Literal.new(true)),
#  Type::Function.new(ty_int_, ty_bool))

#with_ary_first = fn(e: Expression){
#  Expression::Extern.new("Array#first",
#    Type::Quantification.new("T",
#      Type::Function.new(ty_ary_t_, Type::Variable.new("T"))),
#    e)
#}
with_int_ary = fn(name: String, e: Expression){
  ty_ary_int = Type::Raw.new("Array", ty_int_)
  Expression::Extern.new(name, ty_ary_int, e)
}
#
#args = [Expression::Variable.new("nums")].unsafe_cast(Array<Expression>)
#e = with_ary_first(
#  with_int_ary("nums",
#               Expression::Application.new(
#                 Expression::Variable.new("Array#first"),
#                 args)))

# Array#map<U>(self: Array<T>, f: T -> U) -> Array<U>
with_ary_map = fn(e: Expression){
  #t_ = [Type::Variable.new("T")].unsafe_cast(Array<Type>)
  u = Type::Variable.new("U")
  u_ = [u].unsafe_cast(Array<Type>)
  #ty_ary_t = Type::Raw.new("Array", t_)
  ty_f = Type::Function.new(t_, u)
  Expression::Extern.new("Array#map",
    Type::Quantification.new("T",
      Type::Quantification.new("U",
        Type::Function.new([ty_ary_t, ty_f], u))),
    e)
}
with_int_to_s = fn(e: Expression){
  Expression::Extern.new("Int#to_s",
    Type::Function.new(ty_int_, ty_str),
    e)
}

# nums is Array<Int>
# nums.map{ _.to_s }
e = with_ary_map(
  with_int_to_s(
  with_int_ary("nums",
    Expression::Application.new(
      Expression::Variable.new("Array#map"),
      [Expression::Variable.new("nums"),
       Expression::Variable.new("Int#to_s")].unsafe_cast(Array<Expression>))
              )))
Bidi.new.run(e)
